{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["SUBREDDITS","App","props","state","posts","currentPostIndex","nextPic","bind","prevPic","handleKeyDown","commentsLink","forEach","subreddit","fetch","then","res","json","addToStatePosts","data","children","sort","Math","random","document","addEventListener","this","removeEventListener","newPosts","onlyImagesPosts","filter","value","url","match","setState","concat","event","key","length","body","classList","toggle","getElementById","innerHTML","currentPost","permalink","id","onClick","className","href","target","rel","toggleDaymode","src","alt","title","style","zIndex","Component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","URL","process","origin","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9847b97a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nconst SUBREDDITS = [\n  'memes',\n  'me_irl',\n  'dankmemes',\n  'BikiniBottomTwitter'\n]\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      posts: [],\n      currentPostIndex: 0\n    }\n    this.nextPic = this.nextPic.bind(this)\n    this.prevPic = this.prevPic.bind(this)\n    this.handleKeyDown = this.handleKeyDown.bind(this)\n    this.commentsLink = this.commentsLink.bind(this)\n  }\n\n  componentDidMount() {\n    SUBREDDITS.forEach(subreddit => {\n      const url = 'https://www.reddit.com/r/' + subreddit + '.json?limit=100'\n      fetch(url).then(res => res.json()).then(posts => {\n        this.addToStatePosts(posts.data.children.sort(() => 0.5 - Math.random()))\n      })\n    })\n    document.addEventListener('keydown', this.handleKeyDown)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n  addToStatePosts(newPosts) {\n    const onlyImagesPosts = newPosts.filter(value => {\n      return value.data.url.match(/\\.(jpeg|jpg|png)$/) != null\n    })\n    this.setState({ posts: this.state.posts.concat(onlyImagesPosts) })\n  }\n\n  handleKeyDown(event) {\n    if (event.key === 'ArrowRight') this.nextPic()\n    if (event.key === 'ArrowLeft') this.prevPic()\n  }\n\n  nextPic() {\n    if(this.state.currentPostIndex + 1 !== this.state.posts.length)\n      this.setState({ currentPostIndex: this.state.currentPostIndex + 1 })\n    else\n      this.setState({ currentPostIndex: 0 })\n  }\n\n  prevPic() {\n    if(this.state.currentPostIndex - 1 >= 0)\n      this.setState({ currentPostIndex: this.state.currentPostIndex - 1 })\n    else\n      this.setState({ currentPostIndex: this.state.posts.length - 1 })\n  }\n\n  currentPost() {\n    return this.state.posts[this.state.currentPostIndex].data\n  }\n\n  toggleDaymode() {\n    document.body.classList.toggle('daymode')\n    if (document.getElementById('night-toggle').innerHTML === 'daymode')\n      document.getElementById('night-toggle').innerHTML = 'nightmode'\n    else\n      document.getElementById('night-toggle').innerHTML = 'daymode'\n  }\n\n  commentsLink() {\n    return 'https://reddit.com' + this.currentPost().permalink\n  }\n\n  render() {\n    if(!this.state.posts.length) {\n      return  <div />\n    }\n    return (\n      <div>\n        <div id=\"links\">\n          <div onClick={ this.prevPic } id=\"prev-select\" className=\"link service-link\">prev pic</div>\n          <a href={ this.currentPost().url } className=\"link\" target=\"_blank\" rel=\"noopener noreferrer\">direct link</a>\n          <a href={ this.commentsLink() } className=\"link\" target=\"_blank\" rel=\"noopener noreferrer\">comments</a>\n          <div onClick={ this.toggleDaymode } id=\"night-toggle\" className=\"link service-link\">daymode</div>\n        </div>\n        <div onClick={ this.nextPic }>\n          <img src={ this.currentPost().url } alt={ this.currentPost().title } style={{zIndex:-1}} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}